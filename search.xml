<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux-shell编程篇</title>
      <link href="/archives/c7c67fd7.html"/>
      <url>/archives/c7c67fd7.html</url>
      
        <content type="html"><![CDATA[<h4 id="Shell脚本的格式"><a href="#Shell脚本的格式" class="headerlink" title="Shell脚本的格式"></a>Shell脚本的格式</h4><blockquote><p>UNIX的哲学：一条命令只做一件事</p></blockquote><p>为了组合命令并且多次执行，使用脚本文件来保存需要执行的命令</p><p>可以用分号来分割命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 切换并查看var文件夹下的路径和文件总大小</span></span><br><span class="line">cd /var ; ls; pwd; du -sh </span><br></pre></td></tr></table></figure><p>标准的Shell脚本包括以下几项元素</p><ul><li><p>Sha-Bang(#!&#x2F;bin&#x2F;bash)</p></li><li><p>”#“号开头的注释</p></li><li><p>命令</p></li><li><p>执行命令</p><ul><li>Bash .&#x2F;filename.sh</li><li>.&#x2F;filename.sh</li><li>Source .&#x2F;filename.sh</li><li>. Filename.sh</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">脚本的执行命令如果是Bash ./filename.sh和./filename.sh（外部命令），则会在当前终端下产生一个bash的子进程，在子进程下运行脚本，前者不需要设置可执行权限，后者则需要</span><br><span class="line">脚本的执行命令如果是Source ./filename.sh和./filename.sh（内建命令），则会在当前进程下运行脚本</span><br></pre></td></tr></table></figure><p>内建命令不需要创建子进程，对当前Shell生效</p><h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><h5 id="管道与管道符"><a href="#管道与管道符" class="headerlink" title="管道与管道符"></a>管道与管道符</h5><p>管道是进程通信的一种重要方式</p><p>匿名管道（管道符）是<code>Shell</code>编程经常用到的通信工具</p><p>管道符是”|”，将前一个命令执行的结果传递给后面的命令</p><ul><li>ps | cat</li><li>Echo 123 | ps</li><li>ls -l | more</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220408163241791.png" alt="image-20220408163241791"></p><p>输入<code>cd /proc/8948/fd</code>查看进程的文件描述符</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220408163520031.png" alt="image-20220408163520031"></p><p>其中0 -&gt; &#x2F;dev&#x2F;pts&#x2F;0表示标准输入，图形界面终端，0 -&gt; pipe:[]表示标准输出，指向匿名的管道</p><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p>一个进程默认会打开标准输入、标准输出、错误输出三个文件描述符</p><p>输入重定向符号为 ”&lt;“</p><ul><li>read var &lt; &#x2F;path&#x2F;to&#x2F;afile</li></ul><p>输出重定向符号</p><ul><li>“&gt;” 将整个文件内容进行替换</li><li>“&gt;&gt;” 文件内容不变，在文件末尾进行内容追加</li><li>“2&gt;” 错误重定向 若命令错误会被产生的错误输出到文件</li><li>“&amp;&gt;” 无论是错误还是正确的命令都会将结果输出到文件</li><li>例子：echo 123 &gt; &#x2F;path&#x2F;to&#x2F;afile</li></ul><p>输入和输出重定向组合使用</p><ul><li>cat &gt; &#x2F;path&#x2F;to&#x2F;afile &lt;&lt;EOF</li><li>I am $USER</li><li>EOF</li></ul><p>使用<code>wc -l</code> 统计当前输入的行数（ctrl+d退出）</p><p>例：统计&#x2F;etc下passwd文件行数</p><blockquote><p>wc -l &lt; &#x2F;etc&#x2F;passwd</p></blockquote><p>例：在shell脚本中写入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;&lt;<span class="string">EOF表示后续的输入作为子命令的输入，直到遇到EOF</span>位置，再返回</span> </span><br><span class="line">cat &gt; /root/a.sh  &lt;&lt;EOF</span><br><span class="line">echo &quot;hello bash&quot;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出为 hello bash</span></span><br></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量名的命令规则</p><ul><li>字母、数字、下划线</li><li>不以数字开头</li></ul><p>变量的赋值</p><ul><li>变量名&#x3D;变量值  a&#x3D;123</li><li>将命令赋值给变量 l&#x3D;ls</li><li>将命令结果赋值给变量，使用$()或者&#96;&#96;   letc&#x3D;$(ls -l &#x2F;etc)</li><li>变量值有空格等特殊字符可以包含在” “或者’ ‘中</li></ul><p>例： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1=hello bash  中间有空格不行</span><br><span class="line">str1=&quot;hello bash&quot;</span><br><span class="line">str1=&quot;I&#x27;m your father&quot;</span><br></pre></td></tr></table></figure><p>变量引用和变量范围</p><ul><li>${变量名}称作对变量的引用</li><li>echo ${变量名} 查看变量的值</li><li>${变量名} 在部分情况下可以省略为 $变量名</li></ul><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;hello bash&quot;</span><br><span class="line">echo $str1&#125;</span><br><span class="line">echo $str1abc  #找不到该变量</span><br><span class="line">echo $&#123;str1&#125;abc #输出 hello bashabc</span><br></pre></td></tr></table></figure><p>变量的默认作用范围</p><p>当前终端</p><p>例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">echo $a  # 输出1</span><br><span class="line">bash </span><br><span class="line">echo $a  # 输出空</span><br><span class="line">a=2</span><br><span class="line">echo $a # 输出2</span><br><span class="line">exit</span><br><span class="line">echo $a # 输出1</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo_var=123</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建脚本文件 1.sh 内容为<span class="built_in">echo</span> <span class="variable">$demo_var</span> chmod u+x 1.sh 赋予执行权限</span></span><br><span class="line">bash ./1.sh # 输出空</span><br><span class="line">.1.sh  # 输出空</span><br><span class="line">source 1.sh # 输出123</span><br><span class="line">. 1.sh # 输出123</span><br></pre></td></tr></table></figure><p>变量的导出和删除命令</p><ul><li>export  让子进程可以得到父进程的变量</li><li>unset   删除变量</li></ul><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><p>每个<code>shell</code>得到都能得到的变量</p><p>可用<code>env | more</code>查看系统的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令的搜索路径  如果命令在以下路径下，则可以直接运行 比如./1.sh可以运行  1.sh不可以运行</span></span><br><span class="line">echo $PATH</span><br><span class="line">/usr/local/mongodb/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/java/jdk1.8.0_311/bin:/root/bin</span><br></pre></td></tr></table></figure><p>通过 PATH&#x3D;$PATH:&#x2F;root将root目录加入搜索路径后，输入1.sh后可以直接运行</p><h5 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h5><ul><li>$?   查看上一条命令是否正确执行 正确为0，错误为1</li><li>$$  显示当前进程的PID</li><li>$0 显示当前进程的名称</li></ul><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建脚本文件 1.sh 内容为<span class="built_in">echo</span> $$ <span class="built_in">echo</span> <span class="variable">$0</span> chmod u+x 1.sh 赋予执行权限</span></span><br><span class="line">bash ./1.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出 25191 ./1.sh</span></span><br><span class="line">source 1.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出 9393 -bash</span></span><br></pre></td></tr></table></figure><h5 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h5><p>当执行脚本时，可携带参数将值赋予脚本中的位置变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建脚本文件 1.sh</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容为 <span class="built_in">echo</span> <span class="variable">$1</span> <span class="built_in">echo</span> <span class="variable">$2</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chmod u+x 1.sh 赋予执行权限</span></span><br><span class="line">./1.sh -a -l # 传入-a和-l两个参数</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出 -a -l</span> </span><br></pre></td></tr></table></figure><p>技巧：当只传一个参数时，另一个位置变量输出为空，为防止这种问题，可以将echo $2改成echo ${2}_，这样即使不赋值也会有个下划线。</p><p>也可以将echo $2改成 echo ${2-_}，这样当只有一个参数时，显示下划线，两个参数时，不显示下划线</p><h5 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h5><ul><li>&#x2F;etc&#x2F;profile</li><li>~&#x2F;.bash_profile</li><li>~&#x2F;.bashrc</li><li>&#x2F;etc&#x2F;bashrc</li></ul><p>在配置文件中分别输出一些标志性文字，执行登录root用户操作，可以看到四个配置文件的加载顺序</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220408180109049.png" alt="image-20220408180109049"></p><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>定义数组</p><ul><li>ips&#x3D;( 10.0.0.1 10.0.0.2 10.0.0.3 )</li></ul><p>显示数组中所有的元素</p><ul><li>echo ${ips[@]}</li></ul><p>显示数组中元素的个数</p><ul><li>echo $</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-系统操作篇</title>
      <link href="/archives/1a958436.html"/>
      <url>/archives/1a958436.html</url>
      
        <content type="html"><![CDATA[<h4 id="打包压缩和解压缩"><a href="#打包压缩和解压缩" class="headerlink" title="打包压缩和解压缩"></a>打包压缩和解压缩</h4><ul><li>最早的Linux备份介质是磁带，使用额命令是tar</li><li>可以对打包后的磁带文件进行压缩存储，压缩的命令是<code>gzip</code>和<code>bzip2</code></li><li>经常使用的扩展名是 .tar.gz   tar.bz2  .tgz</li></ul><blockquote><p>tar命令后，c代表打包，f指定操作类型为文件，x表示解包</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 将/etc下的文件打包成etc-backup.tar文件并存放在/temp下</span></span><br><span class="line">tar cf /temp/etc-backup.tar /etc </span><br><span class="line"><span class="section"># h参数表示以M为单位显示文件大小</span></span><br><span class="line">ls -lh etc-backup.tar</span><br><span class="line"></span><br><span class="line"><span class="section"># z 代表压缩成.gz格式的压缩包  j代表压缩成.bz2格式的压缩包</span></span><br><span class="line">tar czf /temp/etc-backup.tar.gz /etc</span><br><span class="line">tar cjf /temp/etc-backup.tar.bz2 /etc</span><br><span class="line"></span><br><span class="line"><span class="section"># 解包 到指定文件夹下  zxf表示.gz格式压缩包解压缩 jxf表示.bz2格式压缩包解压缩</span></span><br><span class="line">tar xf /temp/etc-backup.tar -C /root</span><br></pre></td></tr></table></figure><h4 id="Vim的四种模式"><a href="#Vim的四种模式" class="headerlink" title="Vim的四种模式"></a>Vim的四种模式</h4><h5 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h5><ol><li>切换到插入模式</li></ol><p><code>i</code>键进入插入模式，大写<code>i</code>或<code>shift + i </code>键进入插入模式并定位到光标所在行的首部</p><p><code>a</code>键进入插入模式并定位到光标所在位置的下一位，大写<code>a</code>或<code>shift + a</code>键进入插入模式并定位到光标所在行的尾部</p><p><code>o</code>键进入插入模式并定位到当前行的下一行，大写<code>o</code>或<code>shift + o</code>键进入插入模式并定位到当前行的上一行</p><ol start="2"><li>光标移动</li></ol><p>通过<code>hjkl</code>四个按键进行光标的移动，<code>h</code>向左，<code>l</code>向右，<code>j</code>向下，<code>k</code>向上</p><ol start="3"><li>常用操作</li></ol><ul><li><code>yy</code>复制当前行</li><li><code>nyy</code>复制n行</li><li><code>p</code>粘贴</li><li><code>y + $</code>复制当前光标到行尾的内容</li><li><code>dd</code>剪切当前行</li><li><code>d + $</code>剪切当前光标到行尾的内容</li><li><code>u</code>撤销</li><li><code>ctrl+r</code>重做（取消撤销）</li><li><code>x</code>删除单个字符</li><li><code>r + 新字符</code>替换掉旧字符</li><li><code>^</code>定位到行尾</li><li><code>$</code>定位到行首</li><li><code>gg</code>定位到第一行</li><li><code>shift + g</code>定位到最后一行</li></ul><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>输入<code>:</code>进入命令模式，保存当前未命名文件输入<code>w /root/a.txt</code></p><ul><li><p><code>q!</code>不保存退出</p></li><li><p><code>wq</code>保存并退出</p></li><li><p><code>!</code>不退出的情况下临时执行系统命令 比如：<code>!ifconfig</code>查看ip地址</p></li><li><p><code>/ + 要搜索的内容</code> 进行指定内容的搜索 按<code>n</code>进行切换</p></li><li><p><code>s/old/new</code>进行内容的替换（只针对光标所在的行）</p></li><li><p><code>%s/old/new/g</code>进行批量替换（百分号表示针对该光标所在列）</p></li><li><p><code>set nu</code>显示行号    一直都显示行号可以在<code>/etc/vimrc</code>下添加<code>set nu</code></p></li><li><p><code>set nonu</code>不显示行号</p></li><li><p><code>set nohlsearch</code>取消高亮</p></li></ul><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><ol><li><code>useradd 用户名</code>添加新用户 家目录为<code>/home/用户名</code></li></ol><p>   <code>passwd + 用户名</code>给用户修改密码</p><p>   <code>useradd -g 组名 用户名</code> 添加新用户时指定所在组</p><p>   不指定用户组，默认生成一个同名用户组</p><ol start="2"><li><p><code>userdel 用户名</code> 删除指定用户 该方式不会删除用户家目录</p><p>加上<code>-r</code>选项，删除用户并删除用户家目录</p></li><li><p><code>usermod</code> 修改用户属性</p><p><code>usermod -d /home/w1 wilson</code>  <code>-d</code>选表示项修改用户的家目录</p><p><code>usermod -g 组名 用户名</code> 修改用户所在组</p></li><li><p><code>groupadd 组名</code> 添加用户组</p></li><li><p><code>groupdel 组名</code> 删除用户组</p></li><li><p><code>su - 用户名</code> 切换用户并进入该用户家目录</p></li></ol><h5 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h5><ul><li>su 切换用户</li><li>sudo 以其他用户身份执行命令</li></ul><p><code>root</code>用户执行<code>shutdown -h 30</code>半小时后自动关机，普通用户执行<code>shutdown -c</code>来取消该命令</p><p><code>root</code>用户需要将<code>shutdown -c</code>赋予普通用户</p><p>执行<code>visudo</code> 在末行添加<code>user1 ALL=/user/sbin/shutdown -c</code>，<code>user1</code>可以执行<code>shutdown -c</code>命令</p><h5 id="用户和用户组的配置文件"><a href="#用户和用户组的配置文件" class="headerlink" title="用户和用户组的配置文件"></a>用户和用户组的配置文件</h5><ul><li>&#x2F;etc&#x2F;passwd</li></ul><p>7个字段含义如下</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220404142404212.png" alt="image-20220404142404212"></p><p>将<code>/bin/bash</code>改为<code>/sbin/nologin</code>后，该用户不能登录</p><ul><li>&#x2F;etc&#x2F;shadow</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220404143938436.png" alt="image-20220404143938436"></p><p>不同用户即使密码相同，加密后的密码显示也不一样</p><ul><li>&#x2F;etc&#x2F;group</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220404144258416.png" alt="image-20220404144258416"></p><h5 id="文件与目录权限表示方法"><a href="#文件与目录权限表示方法" class="headerlink" title="文件与目录权限表示方法"></a>文件与目录权限表示方法</h5><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220404144553340.png" alt="image-20220404144553340"></p><ol><li>文件类型</li></ol><ul><li>—普通文件</li></ul><ul><li>d 目录文件</li><li>b 块特殊文件</li><li>c 字符特殊文件</li><li>l 符号链接</li><li>f 命名管道</li><li>s 套接字文件</li></ul><ol start="2"><li>字符权限表示方法</li></ol><ul><li>r 读</li><li>w 写</li><li>x 执行</li></ul><ol start="3"><li>数字权限表示方法</li></ol><ul><li>r 4</li><li>w 2</li><li>x 1</li></ul><p>文件权限的表示方法</p><ol start="4"><li>-rw-r-xr– 1 username groupname mtime filename</li></ol><p>rw- 文件属主的权限</p><p>r-x文件属组的权限</p><p>r–其他用户的权限</p><p>创建新文件有默认权限，根据umask值计算，属主和属组根据当前进程的用户来设定</p><ol start="5"><li>目录权限的表示方法</li></ol><ul><li>x 进入目录</li><li>rx 显示目录内的文件名</li><li>wx 修改目录内的文件名</li></ul><h5 id="修改权限命令"><a href="#修改权限命令" class="headerlink" title="修改权限命令"></a>修改权限命令</h5><p><code>chmod</code> 修改文件、目录权限</p><p><code>chown</code>更改属主、属组</p><p>以下为三个普通用户的信息和一个测试文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220404150546440.png" alt="image-20220404150546440"></p><p><code>chown user1 /test</code>更改文件夹所属主</p><p><code>chown :group1 /test</code> 更改文件夹所属组</p><p><code>chown user1:group /test/afile</code> 更改文件所属主和所属组</p><p>设置权限</p><ul><li>chmod u+r user1</li><li>chmod g-w user1</li><li>chmod o+rwx user1</li><li>chmod u&#x3D;rwx user1</li><li>chmod a+r user1</li><li>chmod 664 user1</li><li>Chmod 777 user1</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> 用户管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础</title>
      <link href="/archives/9891ebc8.html"/>
      <url>/archives/9891ebc8.html</url>
      
        <content type="html"><![CDATA[<h4 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h4><h5 id="Git的特点"><a href="#Git的特点" class="headerlink" title="Git的特点"></a>Git的特点</h5><ul><li>最优的存储能力</li><li>非凡的性能</li><li>开源</li><li>容易备份</li><li>支持离线操作</li><li>容易定制工作流程</li></ul><h5 id="最小配置"><a href="#最小配置" class="headerlink" title="最小配置"></a>最小配置</h5><p>配置<code>user</code>信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示config的配置 加--list</span></span><br><span class="line">git config --list --global</span><br></pre></td></tr></table></figure><p><code>config</code>的三个作用域(优先级 local &gt; global &gt; system)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --<span class="built_in">local</span>    <span class="comment">#只对当前仓库有效  缺省</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global   <span class="comment">#对登录用户所有仓库有效</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --System   <span class="comment">#对系统的所有用户有效</span></span></span><br></pre></td></tr></table></figure><p><code>unset</code>清除设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --unset --local user.name</span><br></pre></td></tr></table></figure><h5 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 建仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入暂存区</span></span><br><span class="line">git add </span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交</span></span><br><span class="line">git commit -m &quot;信息&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看提交日志</span></span><br><span class="line">git log (--all) (--oneline) --(graph) (-n2)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给文件重命名</span></span><br><span class="line">git mv readme readme.md</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除暂存区</span></span><br><span class="line">git reset --hard</span><br><span class="line">git rm read.md</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看分支</span></span><br><span class="line">git branch -v</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建并基于某一版本切换分支</span></span><br><span class="line">git checkout -b temp(新分支名) 345423ewrs(commitID)</span><br></pre></td></tr></table></figure><h5 id="探索-git文件"><a href="#探索-git文件" class="headerlink" title="探索.git文件"></a>探索.git文件</h5><p>进入.git文件夹，主要研究一下几个文件</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220409212925010.png" alt="image-20220409212925010"></p><p>输入<code>cat HEAD</code>，查看文件内容，为当前的分支引用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref: refs/heads/master </span><br></pre></td></tr></table></figure><p>输入<code>cat config</code>，查看文件内容，与输入<code>git config --local --list</code>命令后显示的内容一致</p><p>进入<code>refs</code>文件夹下，里面有<code>heads</code>和<code>tags</code>两个文件夹，<code>heads</code>文件夹下有<code>master</code>和<code>temp</code>两个文件</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220409213611200.png" alt="image-20220409213611200"></p><p>文件类型为<code>commit</code>对象，与各自分支的指向一致</p><p>进入<code>objects</code>文件夹下，随意进入一个文件夹，查看文件类型为<code>blog</code></p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220409214153398.png" alt="image-20220409214153398"></p><h5 id="commit、tree和blob关系"><a href="#commit、tree和blob关系" class="headerlink" title="commit、tree和blob关系"></a>commit、tree和blob关系</h5><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220409214813476.png" alt="image-20220409214813476"></p><p>一个commit相当于一个当前项目的快照，对应一个tree，项目中一个文件夹也是一个tree，一个文件是一个blob，blob通过文件内容来确定其是否唯一</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220409215447534.png" alt="image-20220409215447534"></p><p>随机选择一个commit对象查看其内容，找到对应的tree，查看tree的内容</p><h4 id="独自使用Git时的常见场景"><a href="#独自使用Git时的常见场景" class="headerlink" title="独自使用Git时的常见场景"></a>独自使用Git时的常见场景</h4><h5 id="删除不需要的分支"><a href="#删除不需要的分支" class="headerlink" title="删除不需要的分支"></a>删除不需要的分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除分支 若报<span class="string">&quot;error: The branch is not fully merged&quot;</span>, 是指这个分支不曾合入到其他任何分支，意味着删除存在风险</span></span><br><span class="line">git branch -d &quot;分支指向ID/分支名称&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除  若确定无风险就用 -D</span></span><br><span class="line">git branch -D &quot;分支指向ID/分支名称&quot;</span><br></pre></td></tr></table></figure><h5 id="更新最近commit的message"><a href="#更新最近commit的message" class="headerlink" title="更新最近commit的message"></a>更新最近commit的message</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h5 id="更新老旧commit的message"><a href="#更新老旧commit的message" class="headerlink" title="更新老旧commit的message"></a>更新老旧commit的message</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &quot;commit id&quot;  # 进入交互界面</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411101640611.png" alt="image-20220411101640611"></p><p>弹出交互界面，进行以下修改</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411101956343.png" alt="image-20220411101956343"></p><p>修改完成后，在弹出的页面中修改具体的commit message</p><h5 id="把连续的commit整理成一个"><a href="#把连续的commit整理成一个" class="headerlink" title="把连续的commit整理成一个"></a>把连续的commit整理成一个</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &quot;commit id&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411102416121.png" alt="image-20220411102416121"></p><p>在弹出的交互界面中，在要合并的commit中使用squash命令</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411102557069.png" alt="image-20220411102557069"></p><p>在弹出的界面中，写入此次合并commit的message，保存退出即可</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411102759037.png" alt="image-20220411102759037"></p><h5 id="把间隔的commit整理成一个"><a href="#把间隔的commit整理成一个" class="headerlink" title="把间隔的commit整理成一个"></a>把间隔的commit整理成一个</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &quot;commit id&quot; </span><br></pre></td></tr></table></figure><p>在交互页面中，加入未显示的commit信息，并将要合并的间隔commit的位置调整到一起，使用squash命令</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411103428507.png" alt="image-20220411103428507"></p><h5 id="比较暂存区和HEAD-的差异"><a href="#比较暂存区和HEAD-的差异" class="headerlink" title="比较暂存区和HEAD 的差异"></a>比较暂存区和HEAD 的差异</h5><p>在工作区修改文件后，将变更添加到暂存区，此时暂存区与HEAD的差异可以使用以下命令进行查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached # 必须加上 --cached</span><br></pre></td></tr></table></figure><h5 id="比较暂存区和工作区的差异"><a href="#比较暂存区和工作区的差异" class="headerlink" title="比较暂存区和工作区的差异"></a>比较暂存区和工作区的差异</h5><p>在工作区修改文件后，将变更添加到暂存区，此时暂存区与工作区的差异可以使用以下命令进行查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff  </span><br></pre></td></tr></table></figure><h5 id="将暂存区恢复成与HEAD一致"><a href="#将暂存区恢复成与HEAD一致" class="headerlink" title="将暂存区恢复成与HEAD一致"></a>将暂存区恢复成与HEAD一致</h5><p>在不想保留暂存区所有变更的时候，使用该命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><h5 id="将工作区的文件恢复成与暂存区一致"><a href="#将工作区的文件恢复成与暂存区一致" class="headerlink" title="将工作区的文件恢复成与暂存区一致"></a>将工作区的文件恢复成与暂存区一致</h5><p>将工作区的变更1添加到暂存区后，再次进行工作区的变更2，后来想舍弃掉变更2，将工作区恢复成拥有变更1的暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- index.html # index.html是需要进行恢复的文件</span><br></pre></td></tr></table></figure><h5 id="取消暂存区部分文件的更改"><a href="#取消暂存区部分文件的更改" class="headerlink" title="取消暂存区部分文件的更改"></a>取消暂存区部分文件的更改</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD -- index.html readme.md</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411105358631.png" alt="image-20220411105358631"></p><h5 id="消除最近的几次提交"><a href="#消除最近的几次提交" class="headerlink" title="消除最近的几次提交"></a>消除最近的几次提交</h5><p>将分支指向的头指针的commit id更改为目标commit，后面的commit将被消除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &quot;目标头指针commit id&quot;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220411110031339.png" alt="image-20220411110031339"></p><h5 id="查看不同commit的文件差异"><a href="#查看不同commit的文件差异" class="headerlink" title="查看不同commit的文件差异"></a>查看不同commit的文件差异</h5><p>比对两个分支最近的commit的文件差异</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff temp master -- index.html # 使用commit id也可以</span><br></pre></td></tr></table></figure><h5 id="正确删除文件的方式"><a href="#正确删除文件的方式" class="headerlink" title="正确删除文件的方式"></a>正确删除文件的方式</h5><p>以后要commit的文件中不想包括目标文件，使用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一般方式</span></span><br><span class="line">rm -f 文件1 -&gt; git add -&gt; git commit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正确方式</span></span><br><span class="line">git rm -f 文件1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">补充：将暂存区和工作区恢复成与HEAD一致</span></span><br><span class="line">git reset --hard HEAD  </span><br></pre></td></tr></table></figure><h5 id="开发时临时加塞了紧急任务"><a href="#开发时临时加塞了紧急任务" class="headerlink" title="开发时临时加塞了紧急任务"></a>开发时临时加塞了紧急任务</h5><p>当正常开发过程中，工作区和暂存区都有变更，此时需要紧急处理另一个分支产生的bug</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将当前的工作存储起来</span></span><br><span class="line">git stash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看stash列表</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 处理完成后，进行恢复 其中pop弹出后，列表里没有存储的快照，apply则依旧保留</span></span><br><span class="line">git stash pop/appay </span><br></pre></td></tr></table></figure><h4 id="Git与Github的简单同步"><a href="#Git与Github的简单同步" class="headerlink" title="Git与Github的简单同步"></a>Git与Github的简单同步</h4><h5 id="把本地仓库同步Github"><a href="#把本地仓库同步Github" class="headerlink" title="把本地仓库同步Github"></a>把本地仓库同步Github</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加远端github地址</span></span><br><span class="line">git remote add github(远端名称) git@github.com:jsfm888/git_learning.git(仓库ssh地址)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地代码同步到远端</span></span><br><span class="line">git push github --all</span><br></pre></td></tr></table></figure><h4 id="Git多人单分支集成协作时的常见场景"><a href="#Git多人单分支集成协作时的常见场景" class="headerlink" title="Git多人单分支集成协作时的常见场景"></a>Git多人单分支集成协作时的常见场景</h4><p>准备工作</p><p>在github上基于master分支创建<code>feature/add-git-commands</code>新分支</p><p>在本地新建<code>git_learning_02</code>文件夹，克隆远端代码到本地，并配置用户名称和邮箱信息</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412115154403.png" alt="image-20220412115154403"></p><p>基于远端的分支在本地新建并切换到同名分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature/add_git_commands origin/feature/add_git_commands</span><br></pre></td></tr></table></figure><h5 id="场景1：不同人修改了不同文件"><a href="#场景1：不同人修改了不同文件" class="headerlink" title="场景1：不同人修改了不同文件"></a>场景1：不同人修改了不同文件</h5><p>在git_learning_02下，修改style.css文件，并推送到远端</p><p>切换到git_learning下，拉取远端最新的分支，并基于远端的分支在本地新建并切换到同名分支，此时git_learning和git_learning_02处于同一个分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch github</span><br><span class="line">git checkout -b feature/add_git_commands github/feature/add_git_commands</span><br></pre></td></tr></table></figure><p>修改index.html文件并进行commit后，用户在git_learning_02再次做了变更并提交到远端，此时git_learning下的用户在push时会出现以下问题</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412125113016.png" alt="image-20220412125113016"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取远端分支代码</span></span><br><span class="line">git fetch github</span><br></pre></td></tr></table></figure><p>与远端分支相比，本地分支处于<code>ahead 1, behind 1</code>的状态</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412125522137.png" alt="image-20220412125522137"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 合并分支  git pull = git fetch + git merge</span></span><br><span class="line">git merge github/feature/add_git_commands</span><br></pre></td></tr></table></figure><p>合并分支后的本地分支状态为<code>ahead 2</code></p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412125903051.png" alt="image-20220412125903051"></p><p>此时使用<code>git push</code>命令将本地分支推送到远端，状态正常</p><h5 id="场景2：不同人修改了同文件的不同区域"><a href="#场景2：不同人修改了同文件的不同区域" class="headerlink" title="场景2：不同人修改了同文件的不同区域"></a>场景2：不同人修改了同文件的不同区域</h5><p>首先现在git_learning_02下进行git pull命令，同步最新状态</p><p>用户在git_learning下修改index.html并进行了commit，用户在git_learning_02下修改index.html的不同区域并进行了commit，用户在git_learning下先进行push提交后，在git_learning_02进行push提交，被远端拒绝</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412133445667.png" alt="image-20220412133445667"></p><p>同样的，通过git fetch和 git merge origin&#x2F;feature&#x2F;add_git_commands命令将远端的变更同步到本地，最后push到远端</p><h5 id="场景3-：不同人修改了同文件的相同区域"><a href="#场景3-：不同人修改了同文件的相同区域" class="headerlink" title="场景3 ：不同人修改了同文件的相同区域"></a>场景3 ：不同人修改了同文件的相同区域</h5><p>在修改了同文件的相同区域后，用户在git_learning_02先进行了push提交，git_learning下进行提交会被拒绝，使用git pull命令，出现以下问题，显示<code>merge</code>出现了冲突</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412135216959.png" alt="image-20220412135216959"></p><p>手动修改index.html中的内容来解决冲突</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412135330695.png" alt="image-20220412135330695"></p><p>解决冲突后，进行提交，分支状态为<code>ahead 2</code>，推送到远端即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -am &quot;Resolve conflict with four commands in index&quot;</span><br></pre></td></tr></table></figure><h5 id="场景4：同时变更了文件名和文件内容"><a href="#场景4：同时变更了文件名和文件内容" class="headerlink" title="场景4：同时变更了文件名和文件内容"></a>场景4：同时变更了文件名和文件内容</h5><p>在协同开发时，一个用户修改了文件名，另一用户修改了文件内容，修改了文件名的先push到了远端，修改了文件内容的用户不知道文件名的修改，同样push到远端</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220412140530937.png" alt="image-20220412140530937"></p><p>修改了文件内容的用户毫无疑问会被拒绝，使用 git pull命令，git 智能地感知到文件名的变换，本地分支文件名自动修改同时更新了文件内容，分支的状态为<code>ahead 2</code>，push到远端即可</p><h5 id="场景5：同一个文件修改了不同的文件名"><a href="#场景5：同一个文件修改了不同的文件名" class="headerlink" title="场景5：同一个文件修改了不同的文件名"></a>场景5：同一个文件修改了不同的文件名</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git mv index.htm index1.htm  -&gt;  git commit -am &quot;Mv index to index1&quot;</span><br><span class="line">git mv index.htm index2.htm  -&gt;  git commit -am &quot;Mv index to index2&quot;  -&gt;  git push</span><br></pre></td></tr></table></figure><p>用户1在push时会被远端拒绝，git pull拉取远端代码，本地会有index1.htm和index2.htm两个文件</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220413103502603.png" alt="image-20220413103502603"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看两个文件内容是否完全一样</span></span><br><span class="line">diff index1.htm index2.htm</span><br><span class="line"></span><br><span class="line">git rm index.htm -&gt; git add index1.htm -&gt; git rm index2.htm -&gt; git commit -m &quot;Decide to mv index to index1&quot;</span><br></pre></td></tr></table></figure><p>此时分支状态为<code>ahead 2</code>，push到远端即可</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义负载均衡策略实现金丝雀测试</title>
      <link href="/archives/82e3020b.html"/>
      <url>/archives/82e3020b.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Loadbalancer</code>是Spring Cloud提供的客户端负载均衡组件，提供了两种内置负载均衡策略。</p><ul><li>RandomLoadBalancer：随机挑选一台服务器发起远程调用</li><li>RoundRobinLoadBalancerL：通过内部保存的一个<code>position</code>计数器，按照次序从上到下调用服务，每次调用后计数器+1</li></ul><p>在以上负载均衡策略无法满足需求的时候，可以自定义负载均衡策略</p><p>​        <code>Loadbalancer</code>提供了一个顶层的抽象接口<code>ReactiveLoadBalancer</code>，可以通过它来实行自定义的负载均衡策略。</p><h3 id="金丝雀测试"><a href="#金丝雀测试" class="headerlink" title="金丝雀测试"></a>金丝雀测试</h3><p>线上应用平稳运行在一个集群中，当我们想要上线一个设计上下游代码改动的线上应用时。首先想到的是先做一个线上测试。这个测试必须在极小规模的范围内进行，不能影响到整个集群。</p><p>把代码改动部署到极个别的机器上，这几台机器就叫做”<strong>金丝雀</strong>“。</p><p>只有那些带着”<strong>测试流量标记</strong>“的请求会被发到金丝雀机器上，正常的流量请求只会访问集群中的其他机器。</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/cd5687f2e678d2da14eaaf660c50d111.jpg" alt="img"></p><p>了解了金鸡雀测试后，将其应用到用户领券这个场景中</p><h3 id="编写CanaryRule负载均衡"><a href="#编写CanaryRule负载均衡" class="headerlink" title="编写CanaryRule负载均衡"></a>编写<code>CanaryRule</code>负载均衡</h3><p>​        <code>CanaryRule</code>借助<code>Http Header</code>中的属性和<code>Nacos</code>服务节点的<code>metadata</code>完成测试流量的负载均衡，这个过程中，需要准确识别哪些请求是测试流量，并把测试流量导向到正确的目标服务。</p><h4 id="如何识别测试流量"><a href="#如何识别测试流量" class="headerlink" title="如何识别测试流量"></a>如何识别测试流量</h4><p><code>WebClient</code>发出一个请求，其<code>Header</code>的key-value列表中包含了特定的测试流量Key：traffic-version，那么这个请求就是一个测试请求。</p><h4 id="如何对测试流量做负载均衡"><a href="#如何对测试流量做负载均衡" class="headerlink" title="如何对测试流量做负载均衡"></a>如何对测试流量做负载均衡</h4><p>在<code>Nacos</code>服务节点的元数据中插入同样的流量密码：traffic-version。判断测试请求Header中的traffic-version值是否与<code>Nacos</code>服务节点中的一致。</p><h4 id="CanaryRule实现源码"><a href="#CanaryRule实现源码" class="headerlink" title="CanaryRule实现源码"></a><code>CanaryRule</code>实现源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanaryRule</span> <span class="keyword">implements</span> <span class="title">ReactorServiceInstanceLoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider;</span><br><span class="line">    <span class="keyword">private</span> String serviceId;</span><br><span class="line">    <span class="comment">//定义一个轮训策略的种子</span></span><br><span class="line">    <span class="keyword">final</span> AtomicInteger position;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CanaryRule</span><span class="params">(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierList,</span></span></span><br><span class="line"><span class="params"><span class="function">                      String serviceId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceInstanceListSupplierProvider = serviceInstanceListSupplierList;</span><br><span class="line">        <span class="keyword">this</span>.serviceId = serviceId;</span><br><span class="line">        <span class="keyword">this</span>.position = <span class="keyword">new</span> AtomicInteger(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个服务是Loadbalancer的标准接口，也是负载均衡策略选择服务器的入口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; choose(Request request) &#123;</span><br><span class="line">        ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider</span><br><span class="line">                                                .getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">                .map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances, request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//本方法主要完成了对getInstanceResponse的调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title">processInstanceResponse</span><span class="params">(ServiceInstanceListSupplier supplier,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                               List&lt;ServiceInstance&gt; serviceInstances,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                               Request request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取目标节点</span></span><br><span class="line">        Response&lt;ServiceInstance&gt; instanceResponse = getInstanceResponse(serviceInstances, request);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SelectedInstanceCallback 一个回调接口，允许从 LoadBalancer 传递选定的服务实例数据。</span></span><br><span class="line">        <span class="keyword">if</span>(supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; instanceResponse.hasServer()) &#123;</span><br><span class="line">            <span class="comment">//将选定的ServiceInstance作为参数传递。</span></span><br><span class="line">            ((SelectedInstanceCallback) supplier).selectedServiceInstance(instanceResponse.getServer());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instanceResponse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心的根据金丝雀规则返回目标节点方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据金丝雀的规则返回目标节点</span></span><br><span class="line"><span class="function">Response&lt;ServiceInstance&gt; <span class="title">getInstanceResponse</span><span class="params">(List&lt;ServiceInstance&gt; instances, Request request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册中心无实例</span></span><br><span class="line">    <span class="keyword">if</span>(CollectionUtils.isEmpty(instances)) &#123;</span><br><span class="line">      log.warn(<span class="string">&quot;No instance available &#123;&#125;&quot;</span>, serviceId);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> EmptyResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从请求header中获取特定的流量打标值</span></span><br><span class="line">    <span class="comment">//注：以下代码仅适用于WebClient调用，使用RestTemplate或Feign则需要额外调整</span></span><br><span class="line">    DefaultRequestContext context = (DefaultRequestContext) request.getContext();</span><br><span class="line">    RequestData requestData = (RequestData) context.getClientRequest();</span><br><span class="line">    HttpHeaders headers = requestData.getHeaders();</span><br><span class="line"></span><br><span class="line">    String trafficVersion = headers.getFirst(TRAFFIC_VERSION);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果没有找到打标的标记，则使用RoundRobin规则进行轮训</span></span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(trafficVersion))&#123;</span><br><span class="line">      <span class="comment">//过滤掉所有金丝雀测试的节点</span></span><br><span class="line">      List&lt;ServiceInstance&gt; noneCanaryInstances = instances.stream()</span><br><span class="line">              .filter(instance -&gt; !instance.getMetadata().containsKey(TRAFFIC_VERSION))</span><br><span class="line">              .collect(Collectors.toList());</span><br><span class="line">      <span class="keyword">return</span> getRoundRobinInstance(noneCanaryInstances);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到所有金丝雀服务器，然后用轮训算法挑出一台</span></span><br><span class="line">    List&lt;ServiceInstance&gt; canaryInstances = instances.stream()</span><br><span class="line">                .filter(instance -&gt; &#123;</span><br><span class="line">                    String trafficVersionInMetadata = instance.getMetadata().get(TRAFFIC_VERSION);</span><br><span class="line">                    <span class="keyword">return</span> StringUtils.equalsIgnoreCase(trafficVersionInMetadata, trafficVersion);</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> getRoundRobinInstance(canaryInstances);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//轮训机制获取服务节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title">getRoundRobinInstance</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;No servers available for service: &quot;</span> + serviceId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EmptyResponse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos = Math.abs(position.incrementAndGet()); <span class="comment">//每次调用后计数器加一</span></span><br><span class="line">    ServiceInstance serviceInstance = instances.get(pos % instances.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultResponse(serviceInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成了负载均衡规则的编写后，还要将这个规则配置到方法调用过程中</p><h4 id="配置负载均衡策略"><a href="#配置负载均衡策略" class="headerlink" title="配置负载均衡策略"></a>配置负载均衡策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里不用写上@Configuration注解 因为不希望将这个负载均衡策略应用到全局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanaryRuleConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title">reactorServiceInstanceLoadBalancer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                                   LoadBalancerClientFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对应serviceId</span></span><br><span class="line">        String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//在Spring上下文中声明了一个CanaryRule规则</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CanaryRule(factory.getLazyProvider(name,</span><br><span class="line">                ServiceInstanceListSupplier.class), name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写好配置类后，在启动类上添加<code>@LoadBalancerClient</code>注解，将配置类和目标服务关联起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 Configuration 类和目标服务关联起来</span></span><br><span class="line"><span class="comment">// 即发起 coupon-template-serv 的调用，使用 CanaryRuleConfiguration 配置类中定义的规则</span></span><br><span class="line"><span class="meta">@LoadBalancerClient(value = &quot;coupon-template-serv&quot;, configuration = CanaryRuleConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试流量打标"><a href="#测试流量打标" class="headerlink" title="测试流量打标"></a>测试流量打标</h3><p>在用户领券接口的请求参数对象<code>RequestCoupon</code>中添加<code>trafficVersion成员变量</code></p><p>后在构造<code>WebClient</code>请求的header中传入流量标记，这样一来，<code>CanaryRule </code>负载均衡策略就可以根据 header 判断当前请求是否为测试流量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CouponTemplateInfo templateInfo = webClientBuilder.build().get()</span><br><span class="line">                                            .uri(<span class="string">&quot;http://coupon-template-serv/template/getTemplate?id=&quot;</span> + request.getCouponTemplateId())</span><br><span class="line">                                            <span class="comment">//将流量标记传入WebClient请求的请求头中</span></span><br><span class="line">                                            .header(TRAFFIC_VERSION, request.getTraffiVersion())</span><br><span class="line">                                            .retrieve()</span><br><span class="line">                                            .bodyToMono(CouponTemplateInfo.class)</span><br><span class="line">                                            .block();</span><br></pre></td></tr></table></figure><p>最后借助<code>Nacos</code>的<code>metadata</code>将服务节点标记成金丝雀，在Nacos的服务列表中，点击<code>coupon-template-serv</code>的详情按钮，在服务详情页，应该有多个实例，这里暂只有一个，编辑一个新的变量到对应节点的元数据中即可</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220215161147783.png" alt="image-20220215161147783"></p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220215161356949.png" alt="image-20220215161356949"></p><p>至此，自定义的金丝雀负载均衡就完成了</p><p>在postman中调用用户领券接口做测试，在请求参数中指定<code>traffic-version=canary01</code>，这个请求将被转到金丝雀服务节点上。如果填了一个错误的<code>traffic-version</code>值，方法会返回503-Service Unavailable异常。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金丝雀测试 </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/archives/1690d21b.html"/>
      <url>/archives/1690d21b.html</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>学习意义</p><ul><li>企业常用，看懂公司代码必备</li><li>大数据量下处理集合效率高</li><li>代码可读性高</li><li>消灭嵌套地狱</li></ul><h3 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>面向对象思想关注对象完成什么事情，函数式编程则关注对数据进行了什么操作。</p></blockquote><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于“并发编程”</li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><blockquote><p>​        Lambda是JDK8中的一个语法糖，它可以对某些匿名内部类写法进行简化，是函数式编程思想的一个重要体现。我们不用关注是什么对象，更关注对数据进行了什么操作。</p></blockquote><h4 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h4><blockquote><p>可推导的可省略</p></blockquote><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（参数列表）-&gt; &#123;代码&#125;</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ol><li>创建线程启动使用匿名内部类写法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;learning lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>Lambda格式进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;learning lambda&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><ol start="2"><li><code>IntBinaryOperator</code>是一个接口，使用匿名内部类写法调用该方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateNum</span><span class="params">(IntBinaryOperator operator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> operator.applyAsInt(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = calculateNum(<span class="keyword">new</span> IntBinaryOperator() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">applyAsInt</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> left + right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Lambda格式进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res = calculateNum((<span class="keyword">int</span> left, <span class="keyword">int</span> right) -&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> left + right;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Function</code>是一个接口，使用匿名内部类写法调用该方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">R <span class="title">tpyeConvert</span><span class="params">(Function&lt;String, R&gt; function)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;248&quot;</span>;</span><br><span class="line">    R result = function.apply(str);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Integer num = tpyeConvert(<span class="keyword">new</span> Function&lt;String, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Integer.valueOf(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Lambda格式进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer num = tpyeConvert(s -&gt; Integer.valueOf(s));</span><br></pre></td></tr></table></figure><h4 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h4><ul><li>参数类型可以省略</li><li>方法体只有一句代码时，大括号、return和分号可以省略</li><li>方法只有一个参数时小括号可以省略</li></ul><h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><blockquote><p>Java8的Stream流使用的是函数式编程模式，它可以用来对集合或数组进行链状流式操作。</p></blockquote><h4 id="案例准备"><a href="#案例准备" class="headerlink" title="案例准备"></a>案例准备</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作者实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; book;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//书籍实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取作者列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Author&gt; <span class="title">getAuthors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Author author1 = Author.builder().id(<span class="number">1L</span>).name(<span class="string">&quot;kobe&quot;</span>).age(<span class="number">43</span>).intro(<span class="string">&quot;篮球运动员&quot;</span>).book(<span class="keyword">null</span>).build();</span><br><span class="line">        Author author2 = Author.builder().id(<span class="number">2L</span>).name(<span class="string">&quot;莫言&quot;</span>).age(<span class="number">48</span>).intro(<span class="string">&quot;诺贝尔文学奖&quot;</span>).book(<span class="keyword">null</span>).build();</span><br><span class="line">        Author author3 = Author.builder().id(<span class="number">3L</span>).name(<span class="string">&quot;景色分明&quot;</span>).age(<span class="number">24</span>).intro(<span class="string">&quot;高考语文不及格&quot;</span>).book(<span class="keyword">null</span>).build();</span><br><span class="line">        Author author4 = Author.builder().id(<span class="number">3L</span>).name(<span class="string">&quot;景色分明&quot;</span>).age(<span class="number">24</span>).intro(<span class="string">&quot;高考语文不及格&quot;</span>).book(<span class="keyword">null</span>).build();</span><br><span class="line"></span><br><span class="line">        List&lt;Book&gt; books1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Book&gt; books2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Book&gt; books3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        books1.add(Book.builder().id(<span class="number">1L</span>).name(<span class="string">&quot;科比自传:曼巴精神&quot;</span>).category(<span class="string">&quot;哲学，自传&quot;</span>).score(<span class="number">100</span>).intro(<span class="string">&quot;科比布莱恩特的个人自传&quot;</span>).build());</span><br><span class="line">        books1.add(Book.builder().id(<span class="number">2L</span>).name(<span class="string">&quot;曼巴之舞&quot;</span>).category(<span class="string">&quot;哲学，体育&quot;</span>).score(<span class="number">100</span>).intro(<span class="string">&quot;科比曼巴精神&quot;</span>).build());</span><br><span class="line"></span><br><span class="line">        books2.add(Book.builder().id(<span class="number">3L</span>).name(<span class="string">&quot;红高粱家族&quot;</span>).category(<span class="string">&quot;战争，文学&quot;</span>).score(<span class="number">98</span>).intro(<span class="string">&quot;高密东北乡抗击日本侵略者英雄悲壮的舞剧&quot;</span>).build());</span><br><span class="line">        books2.add(Book.builder().id(<span class="number">4L</span>).name(<span class="string">&quot;嫌疑人X的献身&quot;</span>).category(<span class="string">&quot;悬疑，文学&quot;</span>).score(<span class="number">98</span>).intro(<span class="string">&quot;嫌疑人X的献身&quot;</span>).build());</span><br><span class="line">        books2.add(Book.builder().id(<span class="number">4L</span>).name(<span class="string">&quot;嫌疑人X的献身&quot;</span>).category(<span class="string">&quot;悬疑，文学&quot;</span>).score(<span class="number">98</span>).intro(<span class="string">&quot;嫌疑人X的献身&quot;</span>).build());</span><br><span class="line"></span><br><span class="line">        books3.add(Book.builder().id(<span class="number">5L</span>).name(<span class="string">&quot;设计模式之美&quot;</span>).category(<span class="string">&quot;计算机，技术&quot;</span>).score(<span class="number">98</span>).intro(<span class="string">&quot;23种设计模式教学&quot;</span>).build());</span><br><span class="line">        books3.add(Book.builder().id(<span class="number">6L</span>).name(<span class="string">&quot;MySQL必知必会&quot;</span>).category(<span class="string">&quot;数据库，技术&quot;</span>).score(<span class="number">98</span>).intro(<span class="string">&quot;关系型数据库MySQL教学&quot;</span>).build());</span><br><span class="line">        books3.add(Book.builder().id(<span class="number">6L</span>).name(<span class="string">&quot;MySQL必知必会&quot;</span>).category(<span class="string">&quot;数据库，技术&quot;</span>).score(<span class="number">98</span>).intro(<span class="string">&quot;关系型数据库MySQL教学&quot;</span>).build());</span><br><span class="line"></span><br><span class="line">        author1.setBook(books1);</span><br><span class="line">        author2.setBook(books2);</span><br><span class="line">        author3.setBook(books3);</span><br><span class="line">        author4.setBook(books3);</span><br><span class="line">        List&lt;Author&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(author1, author2, author3, author4));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h4><h5 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h5><ol><li>单列集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Stream&lt;Author&gt; stream = authors.stream();</span><br></pre></td></tr></table></figure><ol start="2"><li>数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Stream&lt;Integer&gt; stream1 = Arrays.stream(arr);</span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.of(arr);</span><br></pre></td></tr></table></figure><ol start="3"><li>双列集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;curry&quot;</span>, <span class="number">30</span>);</span><br><span class="line">map.put(<span class="string">&quot;durant&quot;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="comment">//先转换为set单列集合，后转换成了流</span></span><br><span class="line">Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure><h5 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h5><ol><li><code>filter</code></li></ol><blockquote><p>可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对年龄小于30的作家进行过滤，打印作家名称</span></span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .filter(author -&gt; author.getAge() &lt; <span class="number">30</span>)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><ol start="2"><li><code>map</code></li></ol><blockquote><p>可以对流中的元素进行计算或转换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">authors.stream()</span><br><span class="line">        .map(<span class="keyword">new</span> Function&lt;Author, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> author.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .forEach(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化写法</span></span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><ol start="3"><li><code>distinct</code></li></ol><blockquote><p>取出流中的重复元素。distinct依赖Object中的equals()方法判断两个元素是否相同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印作家名称，要求不能有重复元素</span></span><br><span class="line">authors.stream()</span><br><span class="line">  .distinct()</span><br><span class="line">  .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><ol start="4"><li><code>sorted</code></li></ol><blockquote><p>可以对流中的元素进行排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对流中的元素按照年龄进行降序排序，且不能有重复元素</span></span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct</span><br><span class="line">        <span class="comment">//.sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())</span></span><br><span class="line">        .sorted(<span class="keyword">new</span> Comparator&lt;Author&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Author o1, Author o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.getAge() - o1.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getAge()));</span><br></pre></td></tr></table></figure><ol start="5"><li><code>limit</code></li></ol><blockquote><p>可以设置流中元素的最大长度，超出的元素被丢掉</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取流中年龄最大的元素</span></span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">        .limit(<span class="number">1</span>)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><ol start="6"><li><code>skip</code></li></ol><blockquote><p>跳过流中的前n个元素，返回剩下的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取流中年龄前两位的其他作家的名称，不能有重复</span></span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">        .skip(<span class="number">2</span>)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure><ol start="7"><li><code>flatMap</code></li></ol><blockquote><p>map只能把一个对象转换成另一个对象来作为流中的元素，而flatMap可以转换为多个对象作为流中的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有作者的所有书籍名称</span></span><br><span class="line">authors.stream()</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Function&lt;Author, Stream&lt;Book&gt;&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> Stream&lt;Book&gt; <span class="title">apply</span><span class="params">(Author author)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> author.getBook().stream();<span class="comment">//返回流对象</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// .flatMap(author -&gt; author.getBook().stream())</span></span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(book -&gt; System.out.println(book.getName()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取所有书籍的所有分类名称</span></span><br><span class="line">authors.stream()</span><br><span class="line">       .flatMap(author -&gt; author.getBook().stream())</span><br><span class="line">       .distinct()</span><br><span class="line">       .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">       .distinct()</span><br><span class="line">       .forEach(category -&gt; System.out.println(category));</span><br></pre></td></tr></table></figure><h5 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h5><ol><li><code>forEach</code></li><li><code>count</code></li></ol><blockquote><p>用来获取当前流中元素的个数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//书籍个数</span></span><br><span class="line"><span class="keyword">long</span> count = authors.stream()</span><br><span class="line">                    .flatMap(author -&gt; author.getBook().stream())</span><br><span class="line">                    .distinct()</span><br><span class="line">                    .count();</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>min</code>&amp;<code>max</code></li></ol><blockquote><p>用来获取流中的最值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分别获取作家书籍中的最高分</span></span><br><span class="line"><span class="comment">//返回Optional对象</span></span><br><span class="line">Optional&lt;Integer&gt; max = authors.stream()</span><br><span class="line">                                .flatMap(author -&gt; author.getBook().stream())</span><br><span class="line">                                .distinct()</span><br><span class="line">                                .map(book -&gt; book.getScore())</span><br><span class="line">                                .max((score1, score2) -&gt; score1 - score2);</span><br><span class="line">System.out.println(max.get());</span><br></pre></td></tr></table></figure><ol start="4"><li><code>collect</code></li></ol><blockquote><p>将流当中的元素转换成一个集合</p></blockquote><ol start="5"><li><code>anyMatch</code></li></ol><blockquote><p>用来判断是否有任意符合匹配条件的元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> res = authors.stream().anyMatch(author -&gt; author.getAge() &gt; <span class="number">40</span>);</span><br><span class="line">System.out.println(res);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>allMatch</code></li></ol><blockquote><p>用来判断是否都符合匹配条件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> res = authors.stream().allMatch(author -&gt; author.getAge() &gt; <span class="number">40</span>);</span><br><span class="line">System.out.println(res);</span><br></pre></td></tr></table></figure><ol start="7"><li><code>noneMatch</code></li></ol><blockquote><p>与allMatch相反，若都不符合匹配条件则返回true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> res = authors.stream().noneMatch(author -&gt; author.getAge() &gt; <span class="number">40</span>);</span><br><span class="line">System.out.println(res);</span><br></pre></td></tr></table></figure><ol start="8"><li><code>findFirst</code> 比较常用</li></ol><blockquote><p>查找流中的第一个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Author&gt; first = authors.stream()</span><br><span class="line">                .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())</span><br><span class="line">                .findFirst();</span><br><span class="line">System.out.println(first.get());</span><br></pre></td></tr></table></figure><p><code>reduce</code>归并  重要</p><blockquote><p>对流中的数据按照指定的计算方式计算出一个结果。我们可以先传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始值化的基础上进行计算，计算结果再和后面的元素计算。</p></blockquote><p>两个参数重载方法的内部计算方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T result = <span class="function">identity</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(T element : <span class="keyword">this</span>.stream)</span> </span>&#123;</span><br><span class="line">  result = accumulator.apply(result, element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>其中<code>identity</code>就是我们传入的初始值，<code>apply</code>计算方式则是我们制定的计算方式</p><p>例子1：使用reduce求得所有作家的年龄之和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer sum = authors.stream()</span><br><span class="line">                      .distinct()</span><br><span class="line">                      .map(author -&gt; author.getAge())</span><br><span class="line">                      .reduce(<span class="number">0</span>, (result, element) -&gt; result + element);</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><p>例子2：使用reduce求得所有作家年龄的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer maxAge = authors.stream()</span><br><span class="line">                        .distinct()</span><br><span class="line">                        .map(author -&gt; author.getAge())</span><br><span class="line">                        .reduce(Integer.MIN_VALUE, (result, element) -&gt; result &lt; element ? element : result);</span><br><span class="line">System.out.println(maxAge);</span><br></pre></td></tr></table></figure><p>一个参数重载方法的内部计算方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> foundAny = <span class="keyword">false</span>;   </span><br><span class="line">T result = <span class="keyword">null</span>;   </span><br><span class="line"><span class="keyword">for</span> (T element : <span class="keyword">this</span> stream) &#123;       </span><br><span class="line">    <span class="keyword">if</span> (!foundAny) &#123;         </span><br><span class="line">        foundAny = <span class="keyword">true</span>;       </span><br><span class="line">        result = element;       </span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">else</span>         </span><br><span class="line">      result = accumulator.apply(result, element);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> foundAny ? Optional.of(result) : Optional.empty();</span><br></pre></td></tr></table></figure><p>相比于两个参数的reduce，一个参数的初始值就是流中的第一个元素，之后的逻辑基本一样</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream流计算 </tag>
            
            <tag> lambda表达式 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm整合过程记录</title>
      <link href="/archives/147ed769.html"/>
      <url>/archives/147ed769.html</url>
      
        <content type="html"><![CDATA[<h3 id="SSM整合三阶段"><a href="#SSM整合三阶段" class="headerlink" title="SSM整合三阶段"></a>SSM整合三阶段</h3><ul><li><code>Spring</code>和<code>SpringMVC</code>环境配置</li><li><code>Spring</code>和<code>Mybatis</code>整合配置</li><li>整合其他组件: 声明式事务&#x2F;日志&#x2F;任务调度…</li></ul><h3 id="Spring与Spring-MVC环境配置"><a href="#Spring与Spring-MVC环境配置" class="headerlink" title="Spring与Spring MVC环境配置"></a>Spring与Spring MVC环境配置</h3><p>创建<code>webapp</code>工程，加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内置Spring对freemarker的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jackson序列化组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置SpringMVC的<code>web.xml</code>文件，配置<code>DispatcherServlet</code>拦截所有请求，使用过滤器解决POST请求的中文乱码问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解决POST请求的中文乱码问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置spring的<code>applicationContext.xml</code>配置文件，启用<code>mvc</code>的注解模式，设置响应输出的编码字符集，配置<code>Freemarker</code>模板引擎</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.njust&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置响应输出时的编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- JSON(jackson)序列化输出配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Freemarker引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;freemarkerConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateLoaderPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/ftl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;freemarkerSettings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;contentType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.ftl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>Tomcat</code>容器后，创建<code>HelloController</code>控制器，分别测试<code>Freemaker</code>和<code>Restful</code>是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/t2&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map res = <span class="keyword">new</span> HashMap();</span><br><span class="line">        res.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        res.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;爱的问候&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring和Mybatis的整合配置"><a href="#Spring和Mybatis的整合配置" class="headerlink" title="Spring和Mybatis的整合配置"></a>Spring和Mybatis的整合配置</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis整合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis与spring整合组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Spring</code>与<code>Mybatis</code>的整合配置，配置数据源，配置Mybatis的核心对象<code>SqlSessionFactory</code>，配置<code>Mapper</code>扫描器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis与spring的整合配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/imooc-reader?useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>allowPublicKeyRetrival=true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于根据配置信息创建SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis配置文件地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Mapper扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.njust.mapper&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="整合其他组件"><a href="#整合其他组件" class="headerlink" title="整合其他组件"></a>整合其他组件</h3><ul><li>整合<code>logback</code>日志输出</li><li>声明式事务配置</li><li>整合<code>Junit</code>单元测试</li></ul><p>引入单元测试依赖和logback日志组件依赖，前面引入的<code>spring-jdbc</code>，已经包含声明式事务tx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单元测试依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在测试类中，运行在java环境中，没有tomcat提供的avax.servlet，provided表示只在当前运行环境中提供jar包支持，在生产环境中不会使用  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- logback日志组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>书写logback.xml，自定义日志最低输出级别和打印输出格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 向控制台按照自定义的格式打印输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qs.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss&#125; %-5level [%thread] %logger&#123;30&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>UTF-8 <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志的最低输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打印输出样式</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220212143509210.png" alt="image-20220212143509210"></p><p>配置声明式事务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明式事务配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> Mybatis </tag>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webapp的创建记录</title>
      <link href="/archives/f2b4c17c.html"/>
      <url>/archives/f2b4c17c.html</url>
      
        <content type="html"><![CDATA[<p>前置概念</p><blockquote><p>Facets表述了在Module中使用的各种各样的框架、技术和语言。这些Facets让Intellij IDEA知道怎么对待module内容，并保证与相应的框架和语言保持一致。Facets表示某个module有的特征，比如web、strtus2、spring、hibernate等；它的作用就是配置项目框架类支持。</p><p>Artifacts是maven中的一个概念，表示某个module要如何打包，例如war exploded、war、jar、ear等等这种打包形式；它的作用是整合编译后的 java 文件，资源文件等，有不同的整合方式，比如war、jar、war exploded 等，对于 Module 而言，有了 Artifact 就可以部署到 web 容器中了。其中 war 和 war exploded 区别就是后者不压缩，开发时选后者便于看到修改文件后的效果。</p></blockquote><h3 id="IDEA创建Webapp项目"><a href="#IDEA创建Webapp项目" class="headerlink" title="IDEA创建Webapp项目"></a>IDEA创建Webapp项目</h3><p>先创建一个标准的<code>maven</code>工程</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210232418463.png" alt="image-20220210232418463"></p><p>找到<code>project structure</code>，为当前maven工程进行<code>Web</code>应用能力的嵌入</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210232459827.png" alt="image-20220210232459827"></p><p>设置核心的<code>web.xml</code>文件的路径位置，<code>servlet</code>版本设置为4.0</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210232725252.png" alt="image-20220210232725252"></p><p>设置页面的存储位置，应用上下文设置为最常用的”&#x2F;“</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210233132957.png" alt="image-20220210233132957"></p><p>设置<code>Facet</code>的运行方式</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210233238070.png" alt="image-20220210233238070"></p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210233426262.png" alt="image-20220210233426262"></p><p>成功为<code>maven</code>工程加入<code>Web</code>支持</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210233519493.png" alt="image-20220210233519493"></p><p>接下来写一个<code>index.html</code>页面，配置好tomcat容器启动项目即可</p><h3 id="SpringMVC环境配置"><a href="#SpringMVC环境配置" class="headerlink" title="SpringMVC环境配置"></a>SpringMVC环境配置</h3><p>引入Spring-webmvc依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置web.xml文件，设置<code>DispatcherServlet</code>拦截所有请求并添加到IoC容器，设置Spring上下文配置文件所在路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         DispatcherServlet是Spring MVC最核心的对象</span></span><br><span class="line"><span class="comment">         用于拦截http请求，并根据请求的URL调用相对应的controller方法，完成http请求的处理</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置applicationContext.xml所在位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         在Web应用启动时自动创建SpringIoC容器，并初始化DispatcherServlet</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &quot;/&quot;代表拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>applicationContext.xml</code>上下文配置文件，启动SpringMVC的注解开发模式，并将静态资源排除，提高<code>DispatcherServlet</code>的执行效率</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context:component-scan base-package=&quot;com.njust&quot; /&gt;</span><br><span class="line"><span class="comment">&lt;!-- 启用SpringMVC的注解开发模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将图片/js/css等静态资源排除在外，提高DispatcherServlet的执行效率 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>HelloController</code>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springmvc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>tomcat</code>，将maven依赖手动添加到项目中</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220211141318538.png" alt="image-20220211141318538"></p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220211141351998.png" alt="image-20220211141351998"></p><p>启动<code>tomcat</code>，前端浏览器输入<code>http://localhost:8080/hello</code>进行测试</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC IDEA maven webapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用软件服务安装</title>
      <link href="/archives/371728bb.html"/>
      <url>/archives/371728bb.html</url>
      
        <content type="html"><![CDATA[<h3 id="Centos7-9安装MySQL数据库"><a href="#Centos7-9安装MySQL数据库" class="headerlink" title="Centos7.9安装MySQL数据库"></a>Centos7.9安装MySQL数据库</h3><p>MySQL官网下载安装包</p><p>下载到本地后，上传到Linux服务器的<code>/usr/local/mysql</code>文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220210105047873.png" alt="image-20220210105047873"></p><p>解压安装包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-xvf</span> mysql<span class="literal">-5</span>.<span class="number">7.30</span><span class="literal">-1</span>.el7.x86_64.rpm<span class="literal">-bundle</span>.tar</span><br></pre></td></tr></table></figure><p>查询并删除系统自带的<code>mariadb</code>，防止安装<code>mysql</code>冲突</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm <span class="literal">-qa</span> | grep maria</span><br><span class="line">rpm <span class="literal">-e</span> nodeps mariadb<span class="literal">-libs</span></span><br></pre></td></tr></table></figure><p>真正安装<code>mysql</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community</span><span class="literal">-common</span><span class="literal">-5</span>.<span class="number">7.30</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community</span><span class="literal">-libs</span><span class="literal">-5</span>.<span class="number">7.30</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community</span><span class="literal">-client</span><span class="literal">-5</span>.<span class="number">7.30</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> mysql<span class="literal">-community</span><span class="literal">-server</span><span class="literal">-5</span>.<span class="number">7.30</span><span class="literal">-1</span>.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>启动<code>mysql</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> mysqld.service</span><br></pre></td></tr></table></figure><p>查看系统默认的<code>root</code>用户密码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;temporary password&quot;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>修改<code>root</code>用户密码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="literal">-u</span> root <span class="literal">-p</span> <span class="string">&#x27;系统设置的root默认密码&#x27;</span></span><br></pre></td></tr></table></figure><p>设置密码策略为0，默认为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br></pre></td></tr></table></figure><p>为<code>root</code>用户设置自定义密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for &#x27;root&#x27;@&#x27;localhost&#x27;=password(&#x27;qwq123456&#x27;);</span><br></pre></td></tr></table></figure><p>是自定义的密码生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件服务安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringJDBC与事务管理</title>
      <link href="/archives/7a8d2217.html"/>
      <url>/archives/7a8d2217.html</url>
      
        <content type="html"><![CDATA[<h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><ul><li>Spring JDBC与JdbcTemplate对象</li><li>声明式事务配置方式</li><li>声明式事务七种事务传播行为</li></ul><h3 id="介绍Spring-JDBC"><a href="#介绍Spring-JDBC" class="headerlink" title="介绍Spring JDBC"></a>介绍Spring JDBC</h3><blockquote><p>Spring JDBC是Spring框架用于处理关系型数据库的模块，对JDBC API进行了封装，极大简化了开发工作量。<code>JdbcTemplate</code>作为其核心类，提供了数据增删改查的方法。</p></blockquote><p>有了<code>Mybatis</code>为什么还需要Spring JDBC?</p><p>​        Mybatis作为一个<code>ORM</code>框架，封装程度较高，适用于中小企业的敏捷开发，帮助程序员快速地完成与数据库的交互工作。封装程度意味着执行效率相对较低，而Spring JDBC只是对原始的JDBC API的简单封装，一线的互联网大厂的数据量和并发访问量非常高，这时如果使用Mybatis，可能会由于这微小的性能差距，导致总体应用变慢，降低了用户体验，这个时候Spring JDBC的优点就显现出来，得到互联网大厂的青睐，各个企业会结合自己的应用特点对Spring JDBC进行二次封装，简化开发量。</p><h3 id="Spring-JDBC的配置与使用"><a href="#Spring-JDBC的配置与使用" class="headerlink" title="Spring JDBC的配置与使用"></a>Spring JDBC的配置与使用</h3><h4 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h4><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220209120447806.png" alt="image-20220209120447806"></p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>配置数据源和<code>JdbcTemplate</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                    serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JdbcTemplate提供数据增删改查的API --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>   </span><br></pre></td></tr></table></figure><h4 id="前置代码"><a href="#前置代码" class="headerlink" title="前置代码"></a>前置代码</h4><p>创建实例类，与数据库表字段一一对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer eno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> Float salary;</span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">  <span class="comment">//省略get set toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>employeeDao</code>，并加入到IoC容器，关联<code>JdbcTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employeeDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.njust.dao.EmployeeDao&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="junit测试增删改查API"><a href="#junit测试增删改查API" class="headerlink" title="junit测试增删改查API"></a>junit测试增删改查API</h4><p>引入相关<code>junit</code>和<code>Spring test</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建<code>JdbcTemplateTestor</code>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123; &quot;classpath:applicationContext.xml&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateTestor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JdbcTemplate查询API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据员工号查询单条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">findById</span><span class="params">(Integer eno)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">&quot;select * from employee where eno = ?&quot;</span>;</span><br><span class="line">      Employee employee = jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> Object[]&#123;eno&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class));</span><br><span class="line">      <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据部门名称查询多条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findByDname</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">&quot;select * from employee where dname = ?&quot;</span>;</span><br><span class="line">      List&lt;Employee&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> Object[]&#123;dname&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class));</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若没有对数据库字段的映射，则会以map键值对的形式进行查询</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; findMapByDname(String dname) &#123;</span><br><span class="line">      String sql = <span class="string">&quot;select eno as empno, salary as s from employee where dname = ?&quot;</span>;</span><br><span class="line">      List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql, <span class="keyword">new</span> Object[]&#123;dname&#125;);</span><br><span class="line">      <span class="keyword">return</span> maps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JdbcTemplate增删改API，均调用<code>update</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增一条员工数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">&quot;insert into employee(eno, ename, salary, dname, hiredate) values(?,?,?,?,?)&quot;</span>;</span><br><span class="line">      jdbcTemplate.update(sql, <span class="keyword">new</span> Object[]&#123;employee.getEno(),</span><br><span class="line">                                            employee.getEname(), employee.getSalary(),</span><br><span class="line">                                            employee.getDname(), employee.getHiredate()&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">&quot;UPDATE employee SET ename = ?, salary = ?, dname = ?, hiredate = ? where eno = ?&quot;</span>;</span><br><span class="line">      <span class="keyword">int</span> count = jdbcTemplate.update(sql, <span class="keyword">new</span> Object[]&#123;employee.getEname(), employee.getSalary(),</span><br><span class="line">                                                        employee.getDname(), employee.getHiredate(),    employee.getEno()&#125;);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除一条数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer eno)</span> </span>&#123;</span><br><span class="line">      String sql = <span class="string">&quot;delete from employee where eno = ?&quot;</span>;</span><br><span class="line">      <span class="keyword">int</span> count = jdbcTemplate.update(sql, <span class="keyword">new</span> Object[]&#123;eno&#125;);</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><blockquote><p>编程式事务是指通过代码<strong>手动提交和回滚</strong>事务的事务控制方法，<code>SpringJdbc</code>通过<code>TransactionManager</code>事务管理器实现事务控制，事务管理器提供了<code>commit/rollback</code>方法进行事务提交和回滚。编程式事务一般不会在企业开发中使用，了解即可。</p></blockquote><h4 id="批量插入数据示例"><a href="#批量插入数据示例" class="headerlink" title="批量插入数据示例"></a>批量插入数据示例</h4><p>创建<code>EmployeeService</code>业务类，创建批量插入数据方法，配置文件中配置bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">            employee.setEno(<span class="number">7600</span> + i);</span><br><span class="line">            employee.setEname(<span class="string">&quot;谷爱凌&quot;</span>);</span><br><span class="line">            employee.setDname(<span class="string">&quot;Web meeting部&quot;</span>);</span><br><span class="line">            employee.setSalary(<span class="number">16000f</span>);</span><br><span class="line">            employee.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">            employeeDao.insert(employee);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmployeeDao <span class="title">getEmployeeDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmployeeDao</span><span class="params">(EmployeeDao employeeDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employeeDao = employeeDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employeeService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.njust.service.EmployeeService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;employeeDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;employeeDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入<code>logback</code>日志组件依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!-- logback日志组件 Spring框架默认集成 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>JdbcTemplateTestor</code>测试类中测试批量插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      employeeService.batchInsert();</span><br><span class="line">      System.out.println(<span class="string">&quot;批量导入成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台查看<code>debug</code>日志，在10次jdbc连接中才完成批量插入操作                                                                                                                                                                                                                             </p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220209154154632.png" alt="image-20220209154154632"></p><p>在批量插入操作中，添加抛出异常的代码，执行批量插入的测试方法后，数据库新增了3条数据，这说明每次插入操作都是独立的，互不影响，我们想要他要么全部插入成功，要么全部插入失败，保证批量插入的原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;优雅的异常&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">      employee.setEno(<span class="number">7600</span> + i);</span><br><span class="line">      employee.setEname(<span class="string">&quot;谷爱凌&quot;</span>);</span><br><span class="line">      employee.setDname(<span class="string">&quot;Web meeting部&quot;</span>);</span><br><span class="line">      employee.setSalary(<span class="number">16000f</span>);</span><br><span class="line">      employee.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">      employeeDao.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编程式事务实现"><a href="#编程式事务实现" class="headerlink" title="编程式事务实现"></a>编程式事务实现</h4><p>在配置文件中配置事务管理器<code>transactionManager</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employeeService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.njust.service.EmployeeService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;employeeDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;employeeDao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在业务类的循环插入方法内，开启手动开启事务，程序执行正常，提交事务，程序抛出异常则回滚事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//定义了事务的默认标准配置</span></span><br><span class="line">      DefaultTransactionDefinition definition = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">      <span class="comment">//开启一个事务，返回事务状态，说明当前的执行阶段</span></span><br><span class="line">      TransactionStatus status = transactionManager.getTransaction(definition);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;优雅的异常&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//插入一条数据...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transactionManager.commit(status);</span><br><span class="line">      &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        <span class="comment">//回滚事务</span></span><br><span class="line">        transactionManager.rollback(status);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><blockquote><p>声明式事务是在不修改源代码的情况下通过配置形式自动实现事务控制，本质是<strong>AOP环绕通知</strong></p><p>当目标方法执行成功时，自动提交事务，抛出运行时异常时，自动回滚事务</p></blockquote><h4 id="配置具体流程"><a href="#配置具体流程" class="headerlink" title="配置具体流程"></a>配置具体流程</h4><ul><li>配置事务管理器，绑定数据源</li><li>配置事务通知，决定哪些方法使用事务</li><li>配置声明式事务的作用范围</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务通知配置 决定哪些方法使用事务，哪些方法不使用事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当目标方法名为batchImport时，启用声明式事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImport&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- batch开发的方法启用声明式事务 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batch*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- find开发的方法不适用声明式事务 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;NOT_SUPPORTED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义声明式事务的作用范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.njust..*Service.*(..))&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事务传播方式-重要"><a href="#事务传播方式-重要" class="headerlink" title="事务传播方式(重要)"></a>事务传播方式(重要)</h4><p>创建<code>BatchService</code>业务类，添加两个批量插入数据的任务，在<code>EmployeeService</code>中调用，<code>并在配置文件中进行配置事务通知</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImportJob1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setEno(<span class="number">7600</span> + i);</span><br><span class="line">        employee.setEname(<span class="string">&quot;谷爱凌&quot;</span>);</span><br><span class="line">        employee.setDname(<span class="string">&quot;Web meeting部&quot;</span>);</span><br><span class="line">        employee.setSalary(<span class="number">16000f</span>);</span><br><span class="line">        employee.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">        employeeDao.insert(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImportJob2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setEno(<span class="number">7700</span> + i);</span><br><span class="line">        employee.setEname(<span class="string">&quot;杜兰特&quot;</span>);</span><br><span class="line">        employee.setDname(<span class="string">&quot;Room Phone部&quot;</span>);</span><br><span class="line">        employee.setSalary(<span class="number">15000f</span>);</span><br><span class="line">        employee.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">        employeeDao.insert(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImportJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      batchService.batchImportJob1();</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span> == <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;优雅的异常&quot;</span>);</span><br><span class="line">      batchService.batchImportJob2();</span><br><span class="line">      System.out.println(<span class="string">&quot;任务1和任务2完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImportJob&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImportJob1&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImportJob2&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>执行程序后，数据库表中没有新增任何数据，我们希望批量任务1完成之后的数据应该插入成功，这个时候应该使用其他类型的事务传播方式</p><p>事务传播方式常用的五大类型</p><table><thead><tr><th>事务传播类型</th><th>说明</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED(默认)</td><td>如果当前没有事务，则新建事务，如果存在一个事务，则加入这个事务。最常见的选择</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>使用当前事务，如果当前没有事务，就抛出异常</td></tr><tr><td>PROPAGATION_REQUIRES_NEW</td><td>新建事务，如果当前存在事务，就把当前事务挂起</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>以非事务方式执行，如果当前存在事务，则抛出异常</td></tr></tbody></table><p>将上述事务传播行为改为<code>REQUIRES_NEW</code>，执行程序后，数据库会有第一个批量任务插入的数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImportJob&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修改事务传播属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImportJob1&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batchImportJob2&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>REQUIRES_NEW</code>的事务运行示意图</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220209174644770.png" alt="image-20220209174644770"></p><h4 id="注解配置声明式事务"><a href="#注解配置声明式事务" class="headerlink" title="注解配置声明式事务"></a>注解配置声明式事务</h4><p>配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.njust&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                  serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启用注解形式的声明式事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在目标方法上加上<code>@Transaction</code>注解，在属性<code>propagation</code>中设置事务传播属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImportJob1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setEno(<span class="number">7600</span> + i);</span><br><span class="line">        employee.setEname(<span class="string">&quot;谷爱凌&quot;</span>);</span><br><span class="line">        employee.setDname(<span class="string">&quot;Web meeting部&quot;</span>);</span><br><span class="line">        employee.setSalary(<span class="number">16000f</span>);</span><br><span class="line">        employee.setHiredate(<span class="keyword">new</span> Date());</span><br><span class="line">        employeeDao.insert(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchImportJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    batchService.batchImportJob1();</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;优雅的异常&quot;</span>);</span><br><span class="line">    batchService.batchImportJob2();</span><br><span class="line">    System.out.println(<span class="string">&quot;任务1和任务2完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringJDBC </tag>
            
            <tag> 声明式事务 </tag>
            
            <tag> 事务传播属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAOP注解开发和代理模式</title>
      <link href="/archives/894ed59c.html"/>
      <url>/archives/894ed59c.html</url>
      
        <content type="html"><![CDATA[<h3 id="基于注解开发SpringAOP"><a href="#基于注解开发SpringAOP" class="headerlink" title="基于注解开发SpringAOP"></a>基于注解开发SpringAOP</h3><p>核心的两步骤</p><ol><li>写配置</li><li>加注解</li></ol><p>在<code>applicationContext</code>配置文件中开启SpringAOP的注解模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 初始化IoC容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.njust&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启动SpringAOP的注解模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在切面类上加入<code>@Component</code>和<code>@Aspect</code>注解，在切面方法上加入通知注解<code>@Around</code>，并写入切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//加入IoC容器</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//定义切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodChecker</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ProceedingJoinPoint是JoinPoint的升级版 在原有功能基础上还能控制方法是否执行</span></span><br><span class="line">  <span class="comment">//环绕通知 参数为PointCut切点表达式</span></span><br><span class="line">  <span class="meta">@Around(execution(public * com.njust..*.*(..)))</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">check</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            Object ret = pjp.proceed();<span class="comment">//执行目标方法</span></span><br><span class="line">            <span class="keyword">long</span> endTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">            <span class="keyword">if</span>(duration &gt; <span class="number">1000</span>) &#123; <span class="comment">//方法执行时间超过一秒</span></span><br><span class="line">                String className = pjp.getTarget().getClass().getName();</span><br><span class="line">                String methodName = pjp.getSignature().getName();</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">                String now = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">                System.out.println(<span class="string">&quot;======&quot;</span> + now + <span class="string">&quot;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;(&quot;</span> + duration + <span class="string">&quot;ms)======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception message:&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringAOP实现原理"><a href="#SpringAOP实现原理" class="headerlink" title="SpringAOP实现原理"></a>SpringAOP实现原理</h3><p>SpringAOP基于<code>代理模式</code>实现动态功能扩展，包括一下两种形式</p><ul><li>目标类拥有接口，使用JDK动态代理</li><li>目标类没有接口，使用CGLib组件实现动态代理</li></ul><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><blockquote><p>代理模式通过代理对象对原对象进行功能扩展</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%A4%BA%E6%84%8F.png" alt="代理模式示意"></p><h4 id="实现简单静态代理"><a href="#实现简单静态代理" class="headerlink" title="实现简单静态代理"></a>实现简单静态代理</h4><blockquote><p>静态代理是指必须手动创建代理类的代理模式使用方式</p></blockquote><ol><li>创建<code>UserService</code>用户服务接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建<code>UserServiceImpl</code>实现类，也就是委托类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行创建用户逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建持有委托类对象的代理类，在代理方法中调用委托类的目标方法，并进行功能扩展</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//持有委托类的对象</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印当前时间进行功能扩展</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>) + <span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        userService.createUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>main</code>方法中，面向接口编程以委托类对象为参数创建代理类对象，并调用代理方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      UserService userService = <span class="keyword">new</span> UserServiceProxy(<span class="keyword">new</span> UserServiceImpl());</span><br><span class="line">      userService.createUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK动态代理详解"><a href="#JDK动态代理详解" class="headerlink" title="JDK动态代理详解"></a>JDK动态代理详解</h4><blockquote><p>动态代理是指在程序运行过程中，自动在内存中生成代理类的代理模式使用方式</p></blockquote><p><code>InvocationHandler</code>是jdk提供的反射类，用于在jdk动态代理中对目标对象进行增强</p><ol><li>创建<code>ProxyInvocationHandler</code>实现<code>InvocationHandler</code>接口，重写<code>invoke()</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProxyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在invoke()方法内对目标方法进行增强</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy  代理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 目标方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   目标方法实参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       目标方法返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable   目标方法抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//打印当前时间进行功能扩展</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>) + <span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        Object ret = method.invoke(target, args);  <span class="comment">//调用目标方法</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>main</code>方法中，先创建委托类对象，以委托类对象为参数构造<code>InvocationHandler</code>接口实现类的对象，后动态创建代理类，并调用代理方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//委托类对象</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        ProxyInvocationHandler proxyInvocationHandler = <span class="keyword">new</span> ProxyInvocationHandler(userService);</span><br><span class="line">        <span class="comment">//动态创建代理类</span></span><br><span class="line">        UserService userServiceProxy = (UserService)            Proxy.newProxyInstance(userService.getClass().getClassLoader(), <span class="comment">//委托类的类加载器</span></span><br><span class="line">                       userService.getClass().getInterfaces(),  <span class="comment">//委托类实现的接口</span></span><br><span class="line">                       proxyInvocationHandler);<span class="comment">//InvocationHandler接口实现类</span></span><br><span class="line">        userServiceProxy.createUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>JDK动态代理解析</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TODO</span><br></pre></td></tr></table></figure><h4 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h4><ul><li>CGLib是运行时字节码增强技术</li><li>Spring AOP扩展<strong>无接口类</strong>使用CGLib</li><li>AOP会运行时生成目标继承类字节码的方式进行行为扩展</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 示意代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    业务代码</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span>$$<span class="title">EnhancerByCGLIB</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    前置增强</span><br><span class="line">    <span class="keyword">super</span>.findById()</span><br><span class="line">    后置增强</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前的AOP注解开发实例上演示，当没有实现接口时，默认使用CGLib进行运行时方法增强</p><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220208145715337.png" alt="image-20220208145715337"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> 注解开发 </tag>
            
            <tag> 代理模式 </tag>
            
            <tag> 静态代理 </tag>
            
            <tag> jdk动态代理 </tag>
            
            <tag> cglib动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAOP知识点记录</title>
      <link href="/archives/e86e22bd.html"/>
      <url>/archives/e86e22bd.html</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><ul><li>Spring AOP - Aspect Oriented Programming 面向切面编程</li><li>AOP是将<strong>通用</strong>、<strong>与业务无关</strong>的功能抽象封装为<strong>切面类</strong></li><li>切面可配置在目标方法的执行前、后运行，真正做到<strong>即插即用</strong></li></ul><blockquote><p>目的：在不修改源代码的情况下对程序行为进行扩展</p></blockquote><h3 id="初识AOP"><a href="#初识AOP" class="headerlink" title="初识AOP"></a>初识AOP</h3><p>为方便记录AOP相关的知识点，本文只放置一些针对性的核心代码</p><h4 id="新建项目，引入依赖"><a href="#新建项目，引入依赖" class="headerlink" title="新建项目，引入依赖"></a>新建项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Aspectjweaver 是AOP的底层依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前置代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># dao层</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增用户数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># service层</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行创建用户逻辑&quot;</span>);</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateRandomPassword</span><span class="params">(String type, Integer length)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按&quot;</span> + type + <span class="string">&quot;方式生成&quot;</span> + length + <span class="string">&quot;位密码&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;jsfm888&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># xml配置文件</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userDao&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.njust.dao.UserDao&quot;</span> /&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.njust.service.UserService&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span> /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切面方法 用于扩展额外功能</span></span><br><span class="line">    <span class="comment">//joinPoint 连接点 通过连接点可以获取目标类/方法的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExecutionTime</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">        String now = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取目标类名  getTarget() 获取目标对象</span></span><br><span class="line">        String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="comment">//获取目标方法名  getSignature() 获取目标方法</span></span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line"></span><br><span class="line">        System.out.println(now + <span class="string">&quot;--&gt;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取方法的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;参数个数:&quot;</span> + args.length);</span><br><span class="line">        <span class="keyword">for</span>(Object arg : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数:&quot;</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置切面类"><a href="#配置切面类" class="headerlink" title="配置切面类"></a>配置切面类</h4><p>先配置切面类到IoC容器，后配置切点并用<code>execution</code>表达式描述切面作用范围，最后定义切面类，在切点上织入相应通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;methodAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.njust.aspect.MethodAspect&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- PointCut 切点， 使用execution表达式描述切面的作用范围 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * com.njust..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义切面类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;methodAspect&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- before通知(advice)，代表在目标方法运行前执行methodAspect.printExecutionTime() --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printExecutionTime&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="启动程序看效果"><a href="#启动程序看效果" class="headerlink" title="启动程序看效果"></a>启动程序看效果</h4><p>略</p><h3 id="AOP关键概念"><a href="#AOP关键概念" class="headerlink" title="AOP关键概念"></a>AOP关键概念</h3><h4 id="SpringAOP与AspectJ的关系"><a href="#SpringAOP与AspectJ的关系" class="headerlink" title="SpringAOP与AspectJ的关系"></a>SpringAOP与AspectJ的关系</h4><ul><li>Elipse AspectJ，一种基于Java平台的面向切面编程的语言</li><li>SpringAOP使用AspectJWeaver实现类与方法匹配</li><li>SpringAOP利用<code>代理模式</code>实现对象运行时功能扩展</li></ul><h4 id="几个关键概念"><a href="#几个关键概念" class="headerlink" title="几个关键概念"></a>几个关键概念</h4><table><thead><tr><th>注释</th><th>说明</th></tr></thead><tbody><tr><td>Aspect</td><td>切面，具体的可插拔组件功能类，通常一个切面只实现一个通用功能</td></tr><tr><td>Target Class&#x2F;Method</td><td>目标类、目标方法，真正要执行与业务相关的方法</td></tr><tr><td>PointCut</td><td>切入点，使用execution表达式说明切面要作用在哪些类上</td></tr><tr><td>JoinPoint</td><td>连接点，切面运行过程中是包含了目标类&#x2F;方法元数据的对象</td></tr><tr><td>Advice</td><td>通知，说明具体的切面执行时机，Spring包含了五种不同类型通知</td></tr></tbody></table><p>配置过程</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># AOP配置过程</span></span><br><span class="line">依赖AspectJ --&gt; 实现切面类/方法 --&gt; 配置Aspect Bean --&gt; 定义PointCut --&gt; 配置Advice </span><br></pre></td></tr></table></figure><h4 id="JoinPoint核心方法"><a href="#JoinPoint核心方法" class="headerlink" title="JoinPoint核心方法"></a>JoinPoint核心方法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object getTarget() 获取IoC容器内目标对象</span><br><span class="line">Signature getSignature() 获取目标方法</span><br><span class="line">Object getArgs()  获取目标方法参数</span><br><span class="line"><span class="section"># 示例</span></span><br><span class="line">String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">String methodName = joinPoint.getSignature().getName();</span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br></pre></td></tr></table></figure><h4 id="PointCut切点表达式"><a href="#PointCut切点表达式" class="headerlink" title="PointCut切点表达式"></a>PointCut切点表达式</h4><p><img src="https://cdn.jsdelivr.net/gh/jsfm888/mypicgo/img/image-20220207131329304.png" alt="image-20220207131329304"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 切点表达式示例</span></span><br><span class="line">express = execution(public <span class="emphasis">* com.njust..*</span>.<span class="emphasis">*(..))         作用在com.njust包下的所有类的所有方法上</span></span><br><span class="line"><span class="emphasis">express = execution(String com.njust..*</span>.<span class="emphasis">*(..))           返回值为String类型的所有方法上(public可以省略)</span></span><br><span class="line"><span class="emphasis">express = execution(*</span> com.njust..<span class="emphasis">*Service.*</span>(..))         只对所有service类生效</span><br><span class="line">express = execution(<span class="emphasis">* com.njust..*</span>Service.create<span class="emphasis">*(..))   对方法名以create开头的方法生效</span></span><br><span class="line"><span class="emphasis">express = execution(*</span> com.njust..<span class="emphasis">*Service.*</span>())           只对无参数的方法生效</span><br><span class="line">express = execution(<span class="emphasis">* com.njust..*</span>Service.<span class="emphasis">*(*</span>,<span class="emphasis">*))        只对有两个参数的方法生效</span></span><br><span class="line"><span class="emphasis">express = execution(*</span> com.njust..<span class="emphasis">*Service.*</span>(S,<span class="emphasis">*))        只对有两个参数且第一个参数为String类型的方法生效</span></span><br></pre></td></tr></table></figure><h4 id="五种通知类型（环绕通知最重要）"><a href="#五种通知类型（环绕通知最重要）" class="headerlink" title="五种通知类型（环绕通知最重要）"></a>五种通知类型（环绕通知最重要）</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>Before Advice</td><td>前置通知，目标方法运行前执行</td></tr><tr><td>After Advice</td><td>后置通知，目标方法运行后执行</td></tr><tr><td>After Returning Advice</td><td>返回后通知，目标方法返回数据后执行</td></tr><tr><td>After Throwing Advice</td><td>异常通知，目标方法抛出异常后执行</td></tr><tr><td>Around Advice</td><td>环绕通知，最强大的通知，可以自定义通知执行时机，可决定目标方法是否运行</td></tr></tbody></table><p>在切面类中定义切面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;触发后置通知&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturing</span><span class="params">(JoinPoint joinPoint, Object ret)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回后通知:&quot;</span> + ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint, Throwable th)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;异常通知:&quot;</span> + th.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中配置相应的通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;doAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;doAfterReturing&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;ret&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;doAfterThrowing&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;th&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>详解环绕通知</p><p>计算目标类中目标方法的执行时长</p><ol><li>定义切面类</li></ol><p>通过<code>ProceedingJoinPoint</code>控制方法的执行，当方法执行时间超过一号秒时打印方法具体执行时长信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodChecker</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ProceedingJoinPoint是JoinPoint的升级版 在原有功能基础上还能控制方法是否执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">check</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            Object ret = pjp.proceed();<span class="comment">//执行目标方法</span></span><br><span class="line">            <span class="keyword">long</span> endTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">            <span class="keyword">if</span>(duration &gt; <span class="number">1000</span>) &#123; <span class="comment">//方法执行时间超过一秒</span></span><br><span class="line">                String className = pjp.getTarget().getClass().getName();</span><br><span class="line">                String methodName = pjp.getSignature().getName();</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">                String now = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">                System.out.println(<span class="string">&quot;======&quot;</span> + now + <span class="string">&quot;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;(&quot;</span> + duration + <span class="string">&quot;ms)======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception message:&quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置AOP</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;methodChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.njust.aspect.MethodChecker&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * com.njust..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;methodChecker&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;check&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> AspectJ </tag>
            
            <tag> 切点表达式 </tag>
            
            <tag> 五种通知类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注解配置IoC容器</title>
      <link href="/archives/953d00f2.html"/>
      <url>/archives/953d00f2.html</url>
      
        <content type="html"><![CDATA[<h4 id="基于注解的优势"><a href="#基于注解的优势" class="headerlink" title="基于注解的优势"></a>基于注解的优势</h4><blockquote><ol><li>摆脱繁琐的XML形式的bean与依赖注入配置</li><li>基于<code>声明式</code>的原则，更适合轻量级的现代企业应用</li><li>代码可读性更好，研发人员开发体验更好</li></ol></blockquote><h4 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h4><blockquote><ol><li>组件 - 声明当前类的功能和职责</li><li>自动装配 - 根据属性自动注入对象</li><li>元数据 - 更细化的辅助IoC容器管理对象</li></ol></blockquote><h4 id="四组组件类型的注解"><a href="#四组组件类型的注解" class="headerlink" title="四组组件类型的注解"></a>四组组件类型的注解</h4><table><thead><tr><th align="left">注解</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">@Component</td><td align="left">被该注解描述的类将被IoC容器管理并实例化</td></tr><tr><td align="left">@Controller</td><td align="left">表明当前类是MVC应用中的控制器类</td></tr><tr><td align="left">@Service</td><td align="left">表明当前类是Service业务服务类</td></tr><tr><td align="left">@Repository</td><td align="left">表明当前类用于业务持久层</td></tr></tbody></table><p>通过配置XML文件开启组件扫描，注解才能生效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.njust&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;regex&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;com.njust.exclude&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于注解初始化IoC容器"><a href="#基于注解初始化IoC容器" class="headerlink" title="基于注解初始化IoC容器"></a>基于注解初始化IoC容器</h4><p>引入Spring上下文依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建<code>aplicationContext</code>配置文件，开启组件扫描，在IoC容器初始化式自动扫描四种组件类型注解并完成实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在IoC容器初始化式自动扫描四种组件类型注解并完成实例化</span></span><br><span class="line"><span class="comment">         @Repository</span></span><br><span class="line"><span class="comment">         @Service</span></span><br><span class="line"><span class="comment">         @Controller</span></span><br><span class="line"><span class="comment">         @Component</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.njust&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建<code>UserDao</code>类，加入<code>@Repository</code>注解，默认beanId为类名首字母小写，可在注解括号内自定义beanId</p><p>同样的，新建<code>UserService</code>类、<code>UserController</code>类、<code>JSONUtils</code>类，并加上对应的组件注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认beanId为类名首字母小写</span></span><br><span class="line"><span class="comment">//beanId = userDao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(&quot;uDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONUtils</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两种自动装配类的注解"><a href="#两种自动装配类的注解" class="headerlink" title="两种自动装配类的注解"></a>两种自动装配类的注解</h4><h5 id="1-Autowired（按照类型装配）"><a href="#1-Autowired（按照类型装配）" class="headerlink" title="1. Autowired（按照类型装配）"></a>1. Autowired（按照类型装配）</h5><p>按容器内对象类型动态注入属性，由Spring机构提供</p><p>注解加在属性上面，不在执行set方法，且IoC容器会利用反射将属性的private修饰符改为public</p><p>注解加在set方法上后，会自动按照类型对set方法参数进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在创建UserService:&quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spring IoC容器自动通过反射技术将属性private修饰符改为public，直接进行赋值</span></span><br><span class="line">    <span class="comment">//不再执行set方法</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放在set方法上，自动按照类型对set方法参数进行注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setUserDao:&quot;</span> + userDao);</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为演示Autowired注解按照类型装配的特点，定义一个IUserDao接口，UserDao类实现该接口。新建一个<code>UserOracleDao</code>类，同样实现该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认beanId为类名首字母小写</span></span><br><span class="line"><span class="comment">//beanId = userDao</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Repository(&quot;uDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在创建UserDao:&quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOracleDao</span> <span class="keyword">implements</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserOracleDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在创建UserOracleDao:&quot;</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将属性名改为uDao，类型改为IUserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IUserDao uDao;</span><br></pre></td></tr></table></figure><p>启动容器进行初始化，程序会报错，容器中有两个符合条件的Bean</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expected single matching bean but found 2: userDao,userOracleDao</span><br></pre></td></tr></table></figure><p>解决方案：</p><ul><li>搭配<code>@Qualifier(value = &quot;userDao&quot;)</code>注解指定要装配的bean名称来解决该问题</li><li>在任意一个符合条件的bean上加上@Primary注解，表示在类型冲突时优先加载该bean</li></ul><h5 id="2-Resource注解（按照名称装配）–-推荐使用"><a href="#2-Resource注解（按照名称装配）–-推荐使用" class="headerlink" title="2. Resource注解（按照名称装配）– 推荐使用"></a>2. Resource注解（按照名称装配）– 推荐使用</h5><p>优先按名称，再按类型装配</p><p>新建<code>DepartService</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepartService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. <span class="doctag">@Resource</span>设置了name属性，则按name在IoC容器中将bean注入</span></span><br><span class="line"><span class="comment">     * 2. <span class="doctag">@Resource</span>未设置name属性</span></span><br><span class="line"><span class="comment">     *   2.1 以属性名作为bean name在容器中匹配，如匹配则注入</span></span><br><span class="line"><span class="comment">     *   2.2 若未匹配，则会按类型匹配，同<span class="doctag">@Autowired</span>, 需要加入<span class="doctag">@Primary</span>解决类型冲入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用建议：在使用@Resource对象时推荐设置name或保证属性名与bean名称一致</p></blockquote><h4 id="元数据注解"><a href="#元数据注解" class="headerlink" title="元数据注解"></a>元数据注解</h4><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Primary</td><td>按类型装配时，容器中有多个相同类型对象时，拥有此注解的对象优先被注入</td></tr><tr><td>@PostConstruct</td><td>描述方法，相当于XML中的init-method配置的注解版本</td></tr><tr><td>@PreDestroy</td><td>描述方法，相当于XML中的destroy-method配置的注解版本</td></tr><tr><td>@Scope</td><td>设置对象的scope属性</td></tr><tr><td>@Value</td><td>为属性注入静态数据</td></tr></tbody></table><p>在UserService类中加上<code>@Scope</code>注解，设置值为singleton&#x2F;protoType为单例或多例，多例作用域下，只有在使用该类的时候才会添加到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(&quot;protoType&quot;)</span> <span class="comment">//设置单例/多例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>resource</code>目录下新建<code>config.properties</code>配置文件，加入以下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">jsfm888</span></span><br></pre></td></tr></table></figure><p>在<code>UserService</code>类中为属性注入配置文件中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> IoC容器 </tag>
            
            <tag> 注解配置 </tag>
            
            <tag> 组件类型 </tag>
            
            <tag> 自动装配 </tag>
            
            <tag> 元数据注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现极简IoC容器</title>
      <link href="/archives/bffe16f6.html"/>
      <url>/archives/bffe16f6.html</url>
      
        <content type="html"><![CDATA[<p>本文为更好地理解Spring中IoC管理Bean对象的过程，通过反射机制实现一个极简的IoC容器。具体步骤如下：</p><h5 id="创建一个实体类"><a href="#创建一个实体类" class="headerlink" title="创建一个实体类"></a>创建一个实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.njust.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写applicationContext-xml配置文件"><a href="#编写applicationContext-xml配置文件" class="headerlink" title="编写applicationContext.xml配置文件"></a>编写<code>applicationContext.xml</code>配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.njust.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建ApplicationContext接口"><a href="#创建ApplicationContext接口" class="headerlink" title="创建ApplicationContext接口"></a>创建ApplicationContext接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="引入相关依赖"><a href="#引入相关依赖" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Dom4j是xml文件的解析组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Jaxen是Xpath表达式解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建ClassPathXmlApplicationContext类"><a href="#创建ClassPathXmlApplicationContext类" class="headerlink" title="创建ClassPathXmlApplicationContext类"></a>创建ClassPathXmlApplicationContext类</h5><blockquote><ol><li>获取xml配置文件路径并进行UTF-8的URL编码</li><li>读取xml配置文件中的内容</li><li>利用反射创建对象实例</li><li>利用反射调用setMethod方法注入属性</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; iocContainer = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取resources下xml配置文件的路径</span></span><br><span class="line">            String filePath = <span class="keyword">this</span>.getClass().getResource(<span class="string">&quot;/applicationContext.xml&quot;</span>).getPath();</span><br><span class="line">            <span class="comment">//对路径URL进行utf-8格式的编码</span></span><br><span class="line">            filePath = <span class="keyword">new</span> URLDecoder().decode(filePath, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            <span class="comment">//获取xml文档对象</span></span><br><span class="line">            Document document = reader.read(<span class="keyword">new</span> File(filePath));</span><br><span class="line">            List&lt;Node&gt; beanList = document.getRootElement().selectNodes(<span class="string">&quot;bean&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(Node bean : beanList) &#123;</span><br><span class="line">                Element ele = (Element) bean;</span><br><span class="line">                String id = ele.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String className = ele.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="comment">//利用反射动态创建对象实例</span></span><br><span class="line">                Class c = Class.forName(className);</span><br><span class="line">                Object obj = c.newInstance();</span><br><span class="line">                <span class="comment">//注入属性</span></span><br><span class="line">                List&lt;Node&gt; properties = ele.selectNodes(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span>(Node property : properties) &#123;</span><br><span class="line">                      Element p = (Element) property;</span><br><span class="line">                      String propertyName = p.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                      String propertyValue = p.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">                      String setMethodName = <span class="string">&quot;set&quot;</span> + propertyName.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + propertyName.substring(<span class="number">1</span>);</span><br><span class="line">                      System.out.println(<span class="string">&quot;准备执行&quot;</span> + setMethodName + <span class="string">&quot;方法&quot;</span>);</span><br><span class="line">                      Method setMethod = c.getMethod(setMethodName, String.class);</span><br><span class="line">                      setMethod.invoke(obj, propertyValue);</span><br><span class="line">                &#125;</span><br><span class="line">                iocContainer.put(id, obj);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;IoC容器初始化完毕&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iocContainer.get(beanId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在启动类中，初始化自定义的极简IoC容器"><a href="#在启动类中，初始化自定义的极简IoC容器" class="headerlink" title="在启动类中，初始化自定义的极简IoC容器"></a>在启动类中，初始化自定义的极简IoC容器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext();</span><br><span class="line">        Apple sweetApple = (Apple) context.getBean(<span class="string">&quot;sweetApple&quot;</span>);</span><br><span class="line">        System.out.println(sweetApple.getTitle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> IoC容器 </tag>
            
            <tag> 反射机制 </tag>
            
            <tag> xml文件解析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
